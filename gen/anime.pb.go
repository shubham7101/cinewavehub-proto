// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: anime.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnimeSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adult    bool   `protobuf:"varint,1,opt,name=adult,proto3" json:"adult,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PostId   string `protobuf:"bytes,3,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Sub      uint32 `protobuf:"varint,4,opt,name=sub,proto3" json:"sub,omitempty"`
	Dub      uint32 `protobuf:"varint,5,opt,name=dub,proto3" json:"dub,omitempty"`
	Episodes uint32 `protobuf:"varint,6,opt,name=episodes,proto3" json:"episodes,omitempty"`
	Image    *Image `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	Title    string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Jtitle   string `protobuf:"bytes,9,opt,name=jtitle,proto3" json:"jtitle,omitempty"`
	Format   Format `protobuf:"varint,10,opt,name=format,proto3,enum=cinewavehub.Format" json:"format,omitempty"`
	Duration string `protobuf:"bytes,11,opt,name=duration,proto3" json:"duration,omitempty"`
	Released string `protobuf:"bytes,12,opt,name=released,proto3" json:"released,omitempty"`
}

func (x *AnimeSearch) Reset() {
	*x = AnimeSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeSearch) ProtoMessage() {}

func (x *AnimeSearch) ProtoReflect() protoreflect.Message {
	mi := &file_anime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeSearch.ProtoReflect.Descriptor instead.
func (*AnimeSearch) Descriptor() ([]byte, []int) {
	return file_anime_proto_rawDescGZIP(), []int{0}
}

func (x *AnimeSearch) GetAdult() bool {
	if x != nil {
		return x.Adult
	}
	return false
}

func (x *AnimeSearch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnimeSearch) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *AnimeSearch) GetSub() uint32 {
	if x != nil {
		return x.Sub
	}
	return 0
}

func (x *AnimeSearch) GetDub() uint32 {
	if x != nil {
		return x.Dub
	}
	return 0
}

func (x *AnimeSearch) GetEpisodes() uint32 {
	if x != nil {
		return x.Episodes
	}
	return 0
}

func (x *AnimeSearch) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AnimeSearch) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AnimeSearch) GetJtitle() string {
	if x != nil {
		return x.Jtitle
	}
	return ""
}

func (x *AnimeSearch) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_NO_FORMAT
}

func (x *AnimeSearch) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AnimeSearch) GetReleased() string {
	if x != nil {
		return x.Released
	}
	return ""
}

type AnimeSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider   string         `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Pagination *Pagination    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Data       []*AnimeSearch `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AnimeSearchResult) Reset() {
	*x = AnimeSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeSearchResult) ProtoMessage() {}

func (x *AnimeSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_anime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeSearchResult.ProtoReflect.Descriptor instead.
func (*AnimeSearchResult) Descriptor() ([]byte, []int) {
	return file_anime_proto_rawDescGZIP(), []int{1}
}

func (x *AnimeSearchResult) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AnimeSearchResult) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AnimeSearchResult) GetData() []*AnimeSearch {
	if x != nil {
		return x.Data
	}
	return nil
}

type AnimeEpisode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeId   string                 `protobuf:"bytes,1,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	Episode     float32                `protobuf:"fixed32,2,opt,name=episode,proto3" json:"episode,omitempty"`
	Title       map[string]string      `protobuf:"bytes,3,rep,name=title,proto3" json:"title,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Jtitle      string                 `protobuf:"bytes,4,opt,name=jtitle,proto3" json:"jtitle,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	IsFiller    bool                   `protobuf:"varint,6,opt,name=is_filler,json=isFiller,proto3" json:"is_filler,omitempty"`
	Duration    string                 `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Image       *Image                 `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	IsAired     bool                   `protobuf:"varint,10,opt,name=is_aired,json=isAired,proto3" json:"is_aired,omitempty"`
}

func (x *AnimeEpisode) Reset() {
	*x = AnimeEpisode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeEpisode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeEpisode) ProtoMessage() {}

func (x *AnimeEpisode) ProtoReflect() protoreflect.Message {
	mi := &file_anime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeEpisode.ProtoReflect.Descriptor instead.
func (*AnimeEpisode) Descriptor() ([]byte, []int) {
	return file_anime_proto_rawDescGZIP(), []int{2}
}

func (x *AnimeEpisode) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *AnimeEpisode) GetEpisode() float32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *AnimeEpisode) GetTitle() map[string]string {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *AnimeEpisode) GetJtitle() string {
	if x != nil {
		return x.Jtitle
	}
	return ""
}

func (x *AnimeEpisode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnimeEpisode) GetIsFiller() bool {
	if x != nil {
		return x.IsFiller
	}
	return false
}

func (x *AnimeEpisode) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AnimeEpisode) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AnimeEpisode) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *AnimeEpisode) GetIsAired() bool {
	if x != nil {
		return x.IsAired
	}
	return false
}

type AnimeEpisodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string          `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Episodes []*AnimeEpisode `protobuf:"bytes,2,rep,name=episodes,proto3" json:"episodes,omitempty"`
}

func (x *AnimeEpisodes) Reset() {
	*x = AnimeEpisodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeEpisodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeEpisodes) ProtoMessage() {}

func (x *AnimeEpisodes) ProtoReflect() protoreflect.Message {
	mi := &file_anime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeEpisodes.ProtoReflect.Descriptor instead.
func (*AnimeEpisodes) Descriptor() ([]byte, []int) {
	return file_anime_proto_rawDescGZIP(), []int{3}
}

func (x *AnimeEpisodes) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AnimeEpisodes) GetEpisodes() []*AnimeEpisode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type AnimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                map[string]string      `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PostId            map[string]string      `protobuf:"bytes,2,rep,name=post_id,json=postId,proto3" json:"post_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Title             map[string]string      `protobuf:"bytes,3,rep,name=title,proto3" json:"title,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description       string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Image             *Image                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	BannerImage       *Image                 `protobuf:"bytes,6,opt,name=banner_image,json=bannerImage,proto3" json:"banner_image,omitempty"`
	Format            Format                 `protobuf:"varint,7,opt,name=format,proto3,enum=cinewavehub.Format" json:"format,omitempty"`
	Status            Status                 `protobuf:"varint,8,opt,name=status,proto3,enum=cinewavehub.Status" json:"status,omitempty"`
	Aired             *Aired                 `protobuf:"bytes,9,opt,name=aired,proto3" json:"aired,omitempty"`
	Season            Season                 `protobuf:"varint,10,opt,name=season,proto3,enum=cinewavehub.Season" json:"season,omitempty"`
	SeasonYear        uint32                 `protobuf:"varint,11,opt,name=season_year,json=seasonYear,proto3" json:"season_year,omitempty"`
	SeasonInt         uint32                 `protobuf:"varint,12,opt,name=season_int,json=seasonInt,proto3" json:"season_int,omitempty"`
	Episodes          uint32                 `protobuf:"varint,13,opt,name=episodes,proto3" json:"episodes,omitempty"`
	Duration          string                 `protobuf:"bytes,14,opt,name=duration,proto3" json:"duration,omitempty"`
	CountryOfOrigin   string                 `protobuf:"bytes,15,opt,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
	IsLicensed        bool                   `protobuf:"varint,16,opt,name=is_licensed,json=isLicensed,proto3" json:"is_licensed,omitempty"`
	Source            string                 `protobuf:"bytes,17,opt,name=source,proto3" json:"source,omitempty"`
	Hashtag           string                 `protobuf:"bytes,18,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Trailer           *Video                 `protobuf:"bytes,19,opt,name=trailer,proto3" json:"trailer,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Synonyms          []string               `protobuf:"bytes,21,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Genres            []string               `protobuf:"bytes,22,rep,name=genres,proto3" json:"genres,omitempty"`
	Rating            Rating                 `protobuf:"varint,23,opt,name=rating,proto3,enum=cinewavehub.Rating" json:"rating,omitempty"`
	Score             float32                `protobuf:"fixed32,24,opt,name=score,proto3" json:"score,omitempty"`
	MaxScore          float32                `protobuf:"fixed32,25,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Broadcast         string                 `protobuf:"bytes,26,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Producers         []*Company             `protobuf:"bytes,27,rep,name=producers,proto3" json:"producers,omitempty"`
	Themes            []string               `protobuf:"bytes,28,rep,name=themes,proto3" json:"themes,omitempty"`
	Studios           []*Company             `protobuf:"bytes,29,rep,name=studios,proto3" json:"studios,omitempty"`
	Demographic       []string               `protobuf:"bytes,30,rep,name=demographic,proto3" json:"demographic,omitempty"`
	Tags              []*Tag                 `protobuf:"bytes,31,rep,name=tags,proto3" json:"tags,omitempty"`
	Adult             bool                   `protobuf:"varint,32,opt,name=adult,proto3" json:"adult,omitempty"`
	NextAiringEpisode *NextAiringEpisode     `protobuf:"bytes,33,opt,name=next_airing_episode,json=nextAiringEpisode,proto3" json:"next_airing_episode,omitempty"`
	Rankings          []*Ranking             `protobuf:"bytes,34,rep,name=rankings,proto3" json:"rankings,omitempty"`
	OfficialSites     []*OfficialSite        `protobuf:"bytes,35,rep,name=official_sites,json=officialSites,proto3" json:"official_sites,omitempty"`
	OtherInfo         string                 `protobuf:"bytes,36,opt,name=other_info,json=otherInfo,proto3" json:"other_info,omitempty"`
}

func (x *AnimeInfo) Reset() {
	*x = AnimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeInfo) ProtoMessage() {}

func (x *AnimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_anime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeInfo.ProtoReflect.Descriptor instead.
func (*AnimeInfo) Descriptor() ([]byte, []int) {
	return file_anime_proto_rawDescGZIP(), []int{4}
}

func (x *AnimeInfo) GetId() map[string]string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AnimeInfo) GetPostId() map[string]string {
	if x != nil {
		return x.PostId
	}
	return nil
}

func (x *AnimeInfo) GetTitle() map[string]string {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *AnimeInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnimeInfo) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AnimeInfo) GetBannerImage() *Image {
	if x != nil {
		return x.BannerImage
	}
	return nil
}

func (x *AnimeInfo) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_NO_FORMAT
}

func (x *AnimeInfo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NO_STATUS
}

func (x *AnimeInfo) GetAired() *Aired {
	if x != nil {
		return x.Aired
	}
	return nil
}

func (x *AnimeInfo) GetSeason() Season {
	if x != nil {
		return x.Season
	}
	return Season_NO_SEASON
}

func (x *AnimeInfo) GetSeasonYear() uint32 {
	if x != nil {
		return x.SeasonYear
	}
	return 0
}

func (x *AnimeInfo) GetSeasonInt() uint32 {
	if x != nil {
		return x.SeasonInt
	}
	return 0
}

func (x *AnimeInfo) GetEpisodes() uint32 {
	if x != nil {
		return x.Episodes
	}
	return 0
}

func (x *AnimeInfo) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AnimeInfo) GetCountryOfOrigin() string {
	if x != nil {
		return x.CountryOfOrigin
	}
	return ""
}

func (x *AnimeInfo) GetIsLicensed() bool {
	if x != nil {
		return x.IsLicensed
	}
	return false
}

func (x *AnimeInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AnimeInfo) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *AnimeInfo) GetTrailer() *Video {
	if x != nil {
		return x.Trailer
	}
	return nil
}

func (x *AnimeInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AnimeInfo) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *AnimeInfo) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *AnimeInfo) GetRating() Rating {
	if x != nil {
		return x.Rating
	}
	return Rating_NO_RATING
}

func (x *AnimeInfo) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *AnimeInfo) GetMaxScore() float32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *AnimeInfo) GetBroadcast() string {
	if x != nil {
		return x.Broadcast
	}
	return ""
}

func (x *AnimeInfo) GetProducers() []*Company {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *AnimeInfo) GetThemes() []string {
	if x != nil {
		return x.Themes
	}
	return nil
}

func (x *AnimeInfo) GetStudios() []*Company {
	if x != nil {
		return x.Studios
	}
	return nil
}

func (x *AnimeInfo) GetDemographic() []string {
	if x != nil {
		return x.Demographic
	}
	return nil
}

func (x *AnimeInfo) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AnimeInfo) GetAdult() bool {
	if x != nil {
		return x.Adult
	}
	return false
}

func (x *AnimeInfo) GetNextAiringEpisode() *NextAiringEpisode {
	if x != nil {
		return x.NextAiringEpisode
	}
	return nil
}

func (x *AnimeInfo) GetRankings() []*Ranking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *AnimeInfo) GetOfficialSites() []*OfficialSite {
	if x != nil {
		return x.OfficialSites
	}
	return nil
}

func (x *AnimeInfo) GetOtherInfo() string {
	if x != nil {
		return x.OtherInfo
	}
	return ""
}

var File_anime_proto protoreflect.FileDescriptor

var file_anime_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x02, 0x0a, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x75, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77,
	0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x69,
	0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x03, 0x0a, 0x0c,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2e,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x38, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x62, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xe0, 0x0c, 0x0a, 0x09, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x69,
	0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x69, 0x6e,
	0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x65, 0x64, 0x52, 0x05, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x24,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61,
	0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x23,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x35, 0x0a,
	0x07, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x38, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x75, 0x62, 0x68, 0x61, 0x6d, 0x37,
	0x31, 0x30, 0x31, 0x2f, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_anime_proto_rawDescOnce sync.Once
	file_anime_proto_rawDescData = file_anime_proto_rawDesc
)

func file_anime_proto_rawDescGZIP() []byte {
	file_anime_proto_rawDescOnce.Do(func() {
		file_anime_proto_rawDescData = protoimpl.X.CompressGZIP(file_anime_proto_rawDescData)
	})
	return file_anime_proto_rawDescData
}

var file_anime_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_anime_proto_goTypes = []any{
	(*AnimeSearch)(nil),           // 0: cinewavehub.AnimeSearch
	(*AnimeSearchResult)(nil),     // 1: cinewavehub.AnimeSearchResult
	(*AnimeEpisode)(nil),          // 2: cinewavehub.AnimeEpisode
	(*AnimeEpisodes)(nil),         // 3: cinewavehub.AnimeEpisodes
	(*AnimeInfo)(nil),             // 4: cinewavehub.AnimeInfo
	nil,                           // 5: cinewavehub.AnimeEpisode.TitleEntry
	nil,                           // 6: cinewavehub.AnimeInfo.IdEntry
	nil,                           // 7: cinewavehub.AnimeInfo.PostIdEntry
	nil,                           // 8: cinewavehub.AnimeInfo.TitleEntry
	(*Image)(nil),                 // 9: cinewavehub.Image
	(Format)(0),                   // 10: cinewavehub.Format
	(*Pagination)(nil),            // 11: cinewavehub.Pagination
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(Status)(0),                   // 13: cinewavehub.Status
	(*Aired)(nil),                 // 14: cinewavehub.Aired
	(Season)(0),                   // 15: cinewavehub.Season
	(*Video)(nil),                 // 16: cinewavehub.Video
	(Rating)(0),                   // 17: cinewavehub.Rating
	(*Company)(nil),               // 18: cinewavehub.Company
	(*Tag)(nil),                   // 19: cinewavehub.Tag
	(*NextAiringEpisode)(nil),     // 20: cinewavehub.NextAiringEpisode
	(*Ranking)(nil),               // 21: cinewavehub.Ranking
	(*OfficialSite)(nil),          // 22: cinewavehub.OfficialSite
}
var file_anime_proto_depIdxs = []int32{
	9,  // 0: cinewavehub.AnimeSearch.image:type_name -> cinewavehub.Image
	10, // 1: cinewavehub.AnimeSearch.format:type_name -> cinewavehub.Format
	11, // 2: cinewavehub.AnimeSearchResult.pagination:type_name -> cinewavehub.Pagination
	0,  // 3: cinewavehub.AnimeSearchResult.data:type_name -> cinewavehub.AnimeSearch
	5,  // 4: cinewavehub.AnimeEpisode.title:type_name -> cinewavehub.AnimeEpisode.TitleEntry
	9,  // 5: cinewavehub.AnimeEpisode.image:type_name -> cinewavehub.Image
	12, // 6: cinewavehub.AnimeEpisode.release_date:type_name -> google.protobuf.Timestamp
	2,  // 7: cinewavehub.AnimeEpisodes.episodes:type_name -> cinewavehub.AnimeEpisode
	6,  // 8: cinewavehub.AnimeInfo.id:type_name -> cinewavehub.AnimeInfo.IdEntry
	7,  // 9: cinewavehub.AnimeInfo.post_id:type_name -> cinewavehub.AnimeInfo.PostIdEntry
	8,  // 10: cinewavehub.AnimeInfo.title:type_name -> cinewavehub.AnimeInfo.TitleEntry
	9,  // 11: cinewavehub.AnimeInfo.image:type_name -> cinewavehub.Image
	9,  // 12: cinewavehub.AnimeInfo.banner_image:type_name -> cinewavehub.Image
	10, // 13: cinewavehub.AnimeInfo.format:type_name -> cinewavehub.Format
	13, // 14: cinewavehub.AnimeInfo.status:type_name -> cinewavehub.Status
	14, // 15: cinewavehub.AnimeInfo.aired:type_name -> cinewavehub.Aired
	15, // 16: cinewavehub.AnimeInfo.season:type_name -> cinewavehub.Season
	16, // 17: cinewavehub.AnimeInfo.trailer:type_name -> cinewavehub.Video
	12, // 18: cinewavehub.AnimeInfo.updated_at:type_name -> google.protobuf.Timestamp
	17, // 19: cinewavehub.AnimeInfo.rating:type_name -> cinewavehub.Rating
	18, // 20: cinewavehub.AnimeInfo.producers:type_name -> cinewavehub.Company
	18, // 21: cinewavehub.AnimeInfo.studios:type_name -> cinewavehub.Company
	19, // 22: cinewavehub.AnimeInfo.tags:type_name -> cinewavehub.Tag
	20, // 23: cinewavehub.AnimeInfo.next_airing_episode:type_name -> cinewavehub.NextAiringEpisode
	21, // 24: cinewavehub.AnimeInfo.rankings:type_name -> cinewavehub.Ranking
	22, // 25: cinewavehub.AnimeInfo.official_sites:type_name -> cinewavehub.OfficialSite
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_anime_proto_init() }
func file_anime_proto_init() {
	if File_anime_proto != nil {
		return
	}
	file_common_proto_init()
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_anime_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeEpisode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeEpisodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anime_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anime_proto_goTypes,
		DependencyIndexes: file_anime_proto_depIdxs,
		MessageInfos:      file_anime_proto_msgTypes,
	}.Build()
	File_anime_proto = out.File
	file_anime_proto_rawDesc = nil
	file_anime_proto_goTypes = nil
	file_anime_proto_depIdxs = nil
}
