// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: scraper/movie_scraper.proto

package scraper

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MovieSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adult       bool      `protobuf:"varint,1,opt,name=adult,proto3" json:"adult,omitempty"`
	Id          string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PostId      string    `protobuf:"bytes,3,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Title       string    `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	MediaType   MediaType `protobuf:"varint,5,opt,name=media_type,json=mediaType,proto3,enum=cinewavehub.scraper.MediaType" json:"media_type,omitempty"`
	Image       string    `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	ReleaseYear uint32    `protobuf:"varint,7,opt,name=release_year,json=releaseYear,proto3" json:"release_year,omitempty"`
}

func (x *MovieSearch) Reset() {
	*x = MovieSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_movie_scraper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSearch) ProtoMessage() {}

func (x *MovieSearch) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_movie_scraper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSearch.ProtoReflect.Descriptor instead.
func (*MovieSearch) Descriptor() ([]byte, []int) {
	return file_scraper_movie_scraper_proto_rawDescGZIP(), []int{0}
}

func (x *MovieSearch) GetAdult() bool {
	if x != nil {
		return x.Adult
	}
	return false
}

func (x *MovieSearch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MovieSearch) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *MovieSearch) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MovieSearch) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_NONE_MEDIATYPE
}

func (x *MovieSearch) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *MovieSearch) GetReleaseYear() uint32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

type MovieSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider   string         `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Pagination *Pagination    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Data       []*MovieSearch `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MovieSearchResponse) Reset() {
	*x = MovieSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_movie_scraper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSearchResponse) ProtoMessage() {}

func (x *MovieSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_movie_scraper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSearchResponse.ProtoReflect.Descriptor instead.
func (*MovieSearchResponse) Descriptor() ([]byte, []int) {
	return file_scraper_movie_scraper_proto_rawDescGZIP(), []int{1}
}

func (x *MovieSearchResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *MovieSearchResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *MovieSearchResponse) GetData() []*MovieSearch {
	if x != nil {
		return x.Data
	}
	return nil
}

type MovieEpisode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeId   string                 `protobuf:"bytes,1,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	Episode     uint32                 `protobuf:"varint,2,opt,name=episode,proto3" json:"episode,omitempty"`
	Title       map[string]string      `protobuf:"bytes,3,rep,name=title,proto3" json:"title,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Image       *Image                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Score       float32                `protobuf:"fixed32,7,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *MovieEpisode) Reset() {
	*x = MovieEpisode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_movie_scraper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieEpisode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieEpisode) ProtoMessage() {}

func (x *MovieEpisode) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_movie_scraper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieEpisode.ProtoReflect.Descriptor instead.
func (*MovieEpisode) Descriptor() ([]byte, []int) {
	return file_scraper_movie_scraper_proto_rawDescGZIP(), []int{2}
}

func (x *MovieEpisode) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *MovieEpisode) GetEpisode() uint32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *MovieEpisode) GetTitle() map[string]string {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *MovieEpisode) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *MovieEpisode) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MovieEpisode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MovieEpisode) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type MovieEpisodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Episodes []*MovieEpisode `protobuf:"bytes,1,rep,name=episodes,proto3" json:"episodes,omitempty"`
}

func (x *MovieEpisodes) Reset() {
	*x = MovieEpisodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_movie_scraper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieEpisodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieEpisodes) ProtoMessage() {}

func (x *MovieEpisodes) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_movie_scraper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieEpisodes.ProtoReflect.Descriptor instead.
func (*MovieEpisodes) Descriptor() ([]byte, []int) {
	return file_scraper_movie_scraper_proto_rawDescGZIP(), []int{3}
}

func (x *MovieEpisodes) GetEpisodes() []*MovieEpisode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type MovieSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonNo uint32         `protobuf:"varint,1,opt,name=season_no,json=seasonNo,proto3" json:"season_no,omitempty"`
	Episodes *MovieEpisodes `protobuf:"bytes,2,opt,name=episodes,proto3" json:"episodes,omitempty"`
}

func (x *MovieSeason) Reset() {
	*x = MovieSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_movie_scraper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSeason) ProtoMessage() {}

func (x *MovieSeason) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_movie_scraper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSeason.ProtoReflect.Descriptor instead.
func (*MovieSeason) Descriptor() ([]byte, []int) {
	return file_scraper_movie_scraper_proto_rawDescGZIP(), []int{4}
}

func (x *MovieSeason) GetSeasonNo() uint32 {
	if x != nil {
		return x.SeasonNo
	}
	return 0
}

func (x *MovieSeason) GetEpisodes() *MovieEpisodes {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type MovieSeasonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string         `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Seasons  []*MovieSeason `protobuf:"bytes,2,rep,name=seasons,proto3" json:"seasons,omitempty"`
}

func (x *MovieSeasonsResponse) Reset() {
	*x = MovieSeasonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_movie_scraper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieSeasonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSeasonsResponse) ProtoMessage() {}

func (x *MovieSeasonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_movie_scraper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSeasonsResponse.ProtoReflect.Descriptor instead.
func (*MovieSeasonsResponse) Descriptor() ([]byte, []int) {
	return file_scraper_movie_scraper_proto_rawDescGZIP(), []int{5}
}

func (x *MovieSeasonsResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *MovieSeasonsResponse) GetSeasons() []*MovieSeason {
	if x != nil {
		return x.Seasons
	}
	return nil
}

type SeasonOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Season       uint32  `protobuf:"varint,1,opt,name=season,proto3" json:"season,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Aired        *Aired  `protobuf:"bytes,3,opt,name=aired,proto3" json:"aired,omitempty"`
	EpisodeCount uint32  `protobuf:"varint,4,opt,name=episode_count,json=episodeCount,proto3" json:"episode_count,omitempty"`
	Score        float32 `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`
	Description  string  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Image        *Image  `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *SeasonOverview) Reset() {
	*x = SeasonOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_movie_scraper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonOverview) ProtoMessage() {}

func (x *SeasonOverview) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_movie_scraper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonOverview.ProtoReflect.Descriptor instead.
func (*SeasonOverview) Descriptor() ([]byte, []int) {
	return file_scraper_movie_scraper_proto_rawDescGZIP(), []int{6}
}

func (x *SeasonOverview) GetSeason() uint32 {
	if x != nil {
		return x.Season
	}
	return 0
}

func (x *SeasonOverview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeasonOverview) GetAired() *Aired {
	if x != nil {
		return x.Aired
	}
	return nil
}

func (x *SeasonOverview) GetEpisodeCount() uint32 {
	if x != nil {
		return x.EpisodeCount
	}
	return 0
}

func (x *SeasonOverview) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SeasonOverview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SeasonOverview) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type MoviesInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  map[string]string    `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PostId              map[string]string    `protobuf:"bytes,2,rep,name=post_id,json=postId,proto3" json:"post_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Titles              map[string]string    `protobuf:"bytes,3,rep,name=titles,proto3" json:"titles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MediaType           MediaType            `protobuf:"varint,4,opt,name=media_type,json=mediaType,proto3,enum=cinewavehub.scraper.MediaType" json:"media_type,omitempty"`
	IsTv                bool                 `protobuf:"varint,5,opt,name=is_tv,json=isTv,proto3" json:"is_tv,omitempty"`
	Adult               bool                 `protobuf:"varint,6,opt,name=adult,proto3" json:"adult,omitempty"`
	Status              string               `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Season              Season               `protobuf:"varint,8,opt,name=season,proto3,enum=cinewavehub.scraper.Season" json:"season,omitempty"`
	Score               float32              `protobuf:"fixed32,9,opt,name=score,proto3" json:"score,omitempty"`
	MaxScore            float32              `protobuf:"fixed32,10,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Duration            string               `protobuf:"bytes,11,opt,name=duration,proto3" json:"duration,omitempty"`
	Tagline             string               `protobuf:"bytes,12,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Description         string               `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	Aired               *Aired               `protobuf:"bytes,14,opt,name=aired,proto3" json:"aired,omitempty"`
	Image               *Image               `protobuf:"bytes,15,opt,name=image,proto3" json:"image,omitempty"`
	BackgroundImage     *Image               `protobuf:"bytes,16,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	Genres              []string             `protobuf:"bytes,17,rep,name=genres,proto3" json:"genres,omitempty"`
	Keywords            []string             `protobuf:"bytes,18,rep,name=keywords,proto3" json:"keywords,omitempty"`
	CountriesOfOrigin   []string             `protobuf:"bytes,19,rep,name=countries_of_origin,json=countriesOfOrigin,proto3" json:"countries_of_origin,omitempty"`
	OriginalLanguage    string               `protobuf:"bytes,20,opt,name=original_language,json=originalLanguage,proto3" json:"original_language,omitempty"`
	Languages           []string             `protobuf:"bytes,21,rep,name=languages,proto3" json:"languages,omitempty"`
	SpokenLanguages     []*SpokenLanguage    `protobuf:"bytes,22,rep,name=spoken_languages,json=spokenLanguages,proto3" json:"spoken_languages,omitempty"`
	Budget              uint32               `protobuf:"varint,23,opt,name=budget,proto3" json:"budget,omitempty"`
	Revenue             uint32               `protobuf:"varint,24,opt,name=revenue,proto3" json:"revenue,omitempty"`
	Homepage            string               `protobuf:"bytes,25,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Certificate         string               `protobuf:"bytes,26,opt,name=certificate,proto3" json:"certificate,omitempty"`
	TotalSeasons        uint32               `protobuf:"varint,27,opt,name=total_seasons,json=totalSeasons,proto3" json:"total_seasons,omitempty"`
	TotalEpisodes       uint32               `protobuf:"varint,28,opt,name=total_episodes,json=totalEpisodes,proto3" json:"total_episodes,omitempty"`
	SeasonsYears        []uint32             `protobuf:"varint,29,rep,packed,name=seasons_years,json=seasonsYears,proto3" json:"seasons_years,omitempty"`
	Videos              []*Video             `protobuf:"bytes,30,rep,name=videos,proto3" json:"videos,omitempty"`
	ProductionCompanies []*Company           `protobuf:"bytes,31,rep,name=production_companies,json=productionCompanies,proto3" json:"production_companies,omitempty"`
	AlternativeTitles   []*AlternativeTitle  `protobuf:"bytes,32,rep,name=alternative_titles,json=alternativeTitles,proto3" json:"alternative_titles,omitempty"`
	RecommendedMedia    []*RecommendedMedia  `protobuf:"bytes,33,rep,name=recommended_media,json=recommendedMedia,proto3" json:"recommended_media,omitempty"`
	NextAiringEpisode   *NextAiringEpisode   `protobuf:"bytes,34,opt,name=next_airing_episode,json=nextAiringEpisode,proto3" json:"next_airing_episode,omitempty"`
	BelongsToCollection *BelongsToCollection `protobuf:"bytes,35,opt,name=belongs_to_collection,json=belongsToCollection,proto3" json:"belongs_to_collection,omitempty"`
	SeasonsOverview     []*SeasonOverview    `protobuf:"bytes,36,rep,name=seasons_overview,json=seasonsOverview,proto3" json:"seasons_overview,omitempty"`
}

func (x *MoviesInfoResponse) Reset() {
	*x = MoviesInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_movie_scraper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoviesInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoviesInfoResponse) ProtoMessage() {}

func (x *MoviesInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_movie_scraper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoviesInfoResponse.ProtoReflect.Descriptor instead.
func (*MoviesInfoResponse) Descriptor() ([]byte, []int) {
	return file_scraper_movie_scraper_proto_rawDescGZIP(), []int{7}
}

func (x *MoviesInfoResponse) GetId() map[string]string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MoviesInfoResponse) GetPostId() map[string]string {
	if x != nil {
		return x.PostId
	}
	return nil
}

func (x *MoviesInfoResponse) GetTitles() map[string]string {
	if x != nil {
		return x.Titles
	}
	return nil
}

func (x *MoviesInfoResponse) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_NONE_MEDIATYPE
}

func (x *MoviesInfoResponse) GetIsTv() bool {
	if x != nil {
		return x.IsTv
	}
	return false
}

func (x *MoviesInfoResponse) GetAdult() bool {
	if x != nil {
		return x.Adult
	}
	return false
}

func (x *MoviesInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MoviesInfoResponse) GetSeason() Season {
	if x != nil {
		return x.Season
	}
	return Season_NO_SEASON
}

func (x *MoviesInfoResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MoviesInfoResponse) GetMaxScore() float32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *MoviesInfoResponse) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *MoviesInfoResponse) GetTagline() string {
	if x != nil {
		return x.Tagline
	}
	return ""
}

func (x *MoviesInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MoviesInfoResponse) GetAired() *Aired {
	if x != nil {
		return x.Aired
	}
	return nil
}

func (x *MoviesInfoResponse) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MoviesInfoResponse) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *MoviesInfoResponse) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *MoviesInfoResponse) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *MoviesInfoResponse) GetCountriesOfOrigin() []string {
	if x != nil {
		return x.CountriesOfOrigin
	}
	return nil
}

func (x *MoviesInfoResponse) GetOriginalLanguage() string {
	if x != nil {
		return x.OriginalLanguage
	}
	return ""
}

func (x *MoviesInfoResponse) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *MoviesInfoResponse) GetSpokenLanguages() []*SpokenLanguage {
	if x != nil {
		return x.SpokenLanguages
	}
	return nil
}

func (x *MoviesInfoResponse) GetBudget() uint32 {
	if x != nil {
		return x.Budget
	}
	return 0
}

func (x *MoviesInfoResponse) GetRevenue() uint32 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *MoviesInfoResponse) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *MoviesInfoResponse) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *MoviesInfoResponse) GetTotalSeasons() uint32 {
	if x != nil {
		return x.TotalSeasons
	}
	return 0
}

func (x *MoviesInfoResponse) GetTotalEpisodes() uint32 {
	if x != nil {
		return x.TotalEpisodes
	}
	return 0
}

func (x *MoviesInfoResponse) GetSeasonsYears() []uint32 {
	if x != nil {
		return x.SeasonsYears
	}
	return nil
}

func (x *MoviesInfoResponse) GetVideos() []*Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *MoviesInfoResponse) GetProductionCompanies() []*Company {
	if x != nil {
		return x.ProductionCompanies
	}
	return nil
}

func (x *MoviesInfoResponse) GetAlternativeTitles() []*AlternativeTitle {
	if x != nil {
		return x.AlternativeTitles
	}
	return nil
}

func (x *MoviesInfoResponse) GetRecommendedMedia() []*RecommendedMedia {
	if x != nil {
		return x.RecommendedMedia
	}
	return nil
}

func (x *MoviesInfoResponse) GetNextAiringEpisode() *NextAiringEpisode {
	if x != nil {
		return x.NextAiringEpisode
	}
	return nil
}

func (x *MoviesInfoResponse) GetBelongsToCollection() *BelongsToCollection {
	if x != nil {
		return x.BelongsToCollection
	}
	return nil
}

func (x *MoviesInfoResponse) GetSeasonsOverview() []*SeasonOverview {
	if x != nil {
		return x.SeasonsOverview
	}
	return nil
}

var File_scraper_movie_scraper_proto protoreflect.FileDescriptor

var file_scraper_movie_scraper_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda,
	0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61,
	0x64, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61,
	0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x13,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xee, 0x02, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x12, 0x42, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x38, 0x0a,
	0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x69, 0x6e,
	0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4e, 0x6f, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x14, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77,
	0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x69, 0x72, 0x65, 0x64, 0x52, 0x05, 0x61,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0x9f, 0x0f, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x69, 0x6e, 0x65,
	0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x69, 0x6e,
	0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x74, 0x76, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x54, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64,
	0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77,
	0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61,
	0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x05, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65,
	0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4f,
	0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x59, 0x65,
	0x61, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x20,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x69, 0x6e, 0x65,
	0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x56, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x62, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x69, 0x6e, 0x65,
	0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x35, 0x0a, 0x07, 0x49, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x75, 0x62, 0x68, 0x61, 0x6d, 0x37, 0x31, 0x30, 0x31, 0x2f,
	0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scraper_movie_scraper_proto_rawDescOnce sync.Once
	file_scraper_movie_scraper_proto_rawDescData = file_scraper_movie_scraper_proto_rawDesc
)

func file_scraper_movie_scraper_proto_rawDescGZIP() []byte {
	file_scraper_movie_scraper_proto_rawDescOnce.Do(func() {
		file_scraper_movie_scraper_proto_rawDescData = protoimpl.X.CompressGZIP(file_scraper_movie_scraper_proto_rawDescData)
	})
	return file_scraper_movie_scraper_proto_rawDescData
}

var file_scraper_movie_scraper_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_scraper_movie_scraper_proto_goTypes = []any{
	(*MovieSearch)(nil),           // 0: cinewavehub.scraper.MovieSearch
	(*MovieSearchResponse)(nil),   // 1: cinewavehub.scraper.MovieSearchResponse
	(*MovieEpisode)(nil),          // 2: cinewavehub.scraper.MovieEpisode
	(*MovieEpisodes)(nil),         // 3: cinewavehub.scraper.MovieEpisodes
	(*MovieSeason)(nil),           // 4: cinewavehub.scraper.MovieSeason
	(*MovieSeasonsResponse)(nil),  // 5: cinewavehub.scraper.MovieSeasonsResponse
	(*SeasonOverview)(nil),        // 6: cinewavehub.scraper.SeasonOverview
	(*MoviesInfoResponse)(nil),    // 7: cinewavehub.scraper.MoviesInfoResponse
	nil,                           // 8: cinewavehub.scraper.MovieEpisode.TitleEntry
	nil,                           // 9: cinewavehub.scraper.MoviesInfoResponse.IdEntry
	nil,                           // 10: cinewavehub.scraper.MoviesInfoResponse.PostIdEntry
	nil,                           // 11: cinewavehub.scraper.MoviesInfoResponse.TitlesEntry
	(MediaType)(0),                // 12: cinewavehub.scraper.MediaType
	(*Pagination)(nil),            // 13: cinewavehub.scraper.Pagination
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(*Image)(nil),                 // 15: cinewavehub.scraper.Image
	(*Aired)(nil),                 // 16: cinewavehub.scraper.Aired
	(Season)(0),                   // 17: cinewavehub.scraper.Season
	(*SpokenLanguage)(nil),        // 18: cinewavehub.scraper.SpokenLanguage
	(*Video)(nil),                 // 19: cinewavehub.scraper.Video
	(*Company)(nil),               // 20: cinewavehub.scraper.Company
	(*AlternativeTitle)(nil),      // 21: cinewavehub.scraper.AlternativeTitle
	(*RecommendedMedia)(nil),      // 22: cinewavehub.scraper.RecommendedMedia
	(*NextAiringEpisode)(nil),     // 23: cinewavehub.scraper.NextAiringEpisode
	(*BelongsToCollection)(nil),   // 24: cinewavehub.scraper.BelongsToCollection
}
var file_scraper_movie_scraper_proto_depIdxs = []int32{
	12, // 0: cinewavehub.scraper.MovieSearch.media_type:type_name -> cinewavehub.scraper.MediaType
	13, // 1: cinewavehub.scraper.MovieSearchResponse.pagination:type_name -> cinewavehub.scraper.Pagination
	0,  // 2: cinewavehub.scraper.MovieSearchResponse.data:type_name -> cinewavehub.scraper.MovieSearch
	8,  // 3: cinewavehub.scraper.MovieEpisode.title:type_name -> cinewavehub.scraper.MovieEpisode.TitleEntry
	14, // 4: cinewavehub.scraper.MovieEpisode.release_date:type_name -> google.protobuf.Timestamp
	15, // 5: cinewavehub.scraper.MovieEpisode.image:type_name -> cinewavehub.scraper.Image
	2,  // 6: cinewavehub.scraper.MovieEpisodes.episodes:type_name -> cinewavehub.scraper.MovieEpisode
	3,  // 7: cinewavehub.scraper.MovieSeason.episodes:type_name -> cinewavehub.scraper.MovieEpisodes
	4,  // 8: cinewavehub.scraper.MovieSeasonsResponse.seasons:type_name -> cinewavehub.scraper.MovieSeason
	16, // 9: cinewavehub.scraper.SeasonOverview.aired:type_name -> cinewavehub.scraper.Aired
	15, // 10: cinewavehub.scraper.SeasonOverview.image:type_name -> cinewavehub.scraper.Image
	9,  // 11: cinewavehub.scraper.MoviesInfoResponse.id:type_name -> cinewavehub.scraper.MoviesInfoResponse.IdEntry
	10, // 12: cinewavehub.scraper.MoviesInfoResponse.post_id:type_name -> cinewavehub.scraper.MoviesInfoResponse.PostIdEntry
	11, // 13: cinewavehub.scraper.MoviesInfoResponse.titles:type_name -> cinewavehub.scraper.MoviesInfoResponse.TitlesEntry
	12, // 14: cinewavehub.scraper.MoviesInfoResponse.media_type:type_name -> cinewavehub.scraper.MediaType
	17, // 15: cinewavehub.scraper.MoviesInfoResponse.season:type_name -> cinewavehub.scraper.Season
	16, // 16: cinewavehub.scraper.MoviesInfoResponse.aired:type_name -> cinewavehub.scraper.Aired
	15, // 17: cinewavehub.scraper.MoviesInfoResponse.image:type_name -> cinewavehub.scraper.Image
	15, // 18: cinewavehub.scraper.MoviesInfoResponse.background_image:type_name -> cinewavehub.scraper.Image
	18, // 19: cinewavehub.scraper.MoviesInfoResponse.spoken_languages:type_name -> cinewavehub.scraper.SpokenLanguage
	19, // 20: cinewavehub.scraper.MoviesInfoResponse.videos:type_name -> cinewavehub.scraper.Video
	20, // 21: cinewavehub.scraper.MoviesInfoResponse.production_companies:type_name -> cinewavehub.scraper.Company
	21, // 22: cinewavehub.scraper.MoviesInfoResponse.alternative_titles:type_name -> cinewavehub.scraper.AlternativeTitle
	22, // 23: cinewavehub.scraper.MoviesInfoResponse.recommended_media:type_name -> cinewavehub.scraper.RecommendedMedia
	23, // 24: cinewavehub.scraper.MoviesInfoResponse.next_airing_episode:type_name -> cinewavehub.scraper.NextAiringEpisode
	24, // 25: cinewavehub.scraper.MoviesInfoResponse.belongs_to_collection:type_name -> cinewavehub.scraper.BelongsToCollection
	6,  // 26: cinewavehub.scraper.MoviesInfoResponse.seasons_overview:type_name -> cinewavehub.scraper.SeasonOverview
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_scraper_movie_scraper_proto_init() }
func file_scraper_movie_scraper_proto_init() {
	if File_scraper_movie_scraper_proto != nil {
		return
	}
	file_scraper_scraper_common_proto_init()
	file_scraper_scraper_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scraper_movie_scraper_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MovieSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_movie_scraper_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MovieSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_movie_scraper_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MovieEpisode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_movie_scraper_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MovieEpisodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_movie_scraper_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MovieSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_movie_scraper_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MovieSeasonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_movie_scraper_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SeasonOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_movie_scraper_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MoviesInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scraper_movie_scraper_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scraper_movie_scraper_proto_goTypes,
		DependencyIndexes: file_scraper_movie_scraper_proto_depIdxs,
		MessageInfos:      file_scraper_movie_scraper_proto_msgTypes,
	}.Build()
	File_scraper_movie_scraper_proto = out.File
	file_scraper_movie_scraper_proto_rawDesc = nil
	file_scraper_movie_scraper_proto_goTypes = nil
	file_scraper_movie_scraper_proto_depIdxs = nil
}
