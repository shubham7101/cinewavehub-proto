// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: scraper/movie_scraper.proto

package scraper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovieScraper_Info_FullMethodName    = "/cinewavehub.scraper.MovieScraper/Info"
	MovieScraper_Sources_FullMethodName = "/cinewavehub.scraper.MovieScraper/Sources"
)

// MovieScraperClient is the client API for MovieScraper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieScraperClient interface {
	Info(ctx context.Context, in *MovieInfoRequest, opts ...grpc.CallOption) (*MovieInfoResponse, error)
	Sources(ctx context.Context, in *SourcesRequest, opts ...grpc.CallOption) (*SourcesResponse, error)
}

type movieScraperClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieScraperClient(cc grpc.ClientConnInterface) MovieScraperClient {
	return &movieScraperClient{cc}
}

func (c *movieScraperClient) Info(ctx context.Context, in *MovieInfoRequest, opts ...grpc.CallOption) (*MovieInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieInfoResponse)
	err := c.cc.Invoke(ctx, MovieScraper_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieScraperClient) Sources(ctx context.Context, in *SourcesRequest, opts ...grpc.CallOption) (*SourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SourcesResponse)
	err := c.cc.Invoke(ctx, MovieScraper_Sources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieScraperServer is the server API for MovieScraper service.
// All implementations must embed UnimplementedMovieScraperServer
// for forward compatibility.
type MovieScraperServer interface {
	Info(context.Context, *MovieInfoRequest) (*MovieInfoResponse, error)
	Sources(context.Context, *SourcesRequest) (*SourcesResponse, error)
	mustEmbedUnimplementedMovieScraperServer()
}

// UnimplementedMovieScraperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieScraperServer struct{}

func (UnimplementedMovieScraperServer) Info(context.Context, *MovieInfoRequest) (*MovieInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMovieScraperServer) Sources(context.Context, *SourcesRequest) (*SourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sources not implemented")
}
func (UnimplementedMovieScraperServer) mustEmbedUnimplementedMovieScraperServer() {}
func (UnimplementedMovieScraperServer) testEmbeddedByValue()                      {}

// UnsafeMovieScraperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieScraperServer will
// result in compilation errors.
type UnsafeMovieScraperServer interface {
	mustEmbedUnimplementedMovieScraperServer()
}

func RegisterMovieScraperServer(s grpc.ServiceRegistrar, srv MovieScraperServer) {
	// If the following call pancis, it indicates UnimplementedMovieScraperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieScraper_ServiceDesc, srv)
}

func _MovieScraper_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieScraperServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieScraper_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieScraperServer).Info(ctx, req.(*MovieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieScraper_Sources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieScraperServer).Sources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieScraper_Sources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieScraperServer).Sources(ctx, req.(*SourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieScraper_ServiceDesc is the grpc.ServiceDesc for MovieScraper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieScraper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cinewavehub.scraper.MovieScraper",
	HandlerType: (*MovieScraperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _MovieScraper_Info_Handler,
		},
		{
			MethodName: "Sources",
			Handler:    _MovieScraper_Sources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scraper/movie_scraper.proto",
}
