// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: scraper/anime_scraper.proto

package scraper

import (
	common "github.com/shubham7101/cinewavehub-proto/gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnimeSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adult    bool          `protobuf:"varint,1,opt,name=adult,proto3" json:"adult,omitempty"`
	Id       string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PostId   string        `protobuf:"bytes,3,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Sub      uint32        `protobuf:"varint,4,opt,name=sub,proto3" json:"sub,omitempty"`
	Dub      uint32        `protobuf:"varint,5,opt,name=dub,proto3" json:"dub,omitempty"`
	Episodes uint32        `protobuf:"varint,6,opt,name=episodes,proto3" json:"episodes,omitempty"`
	Image    *Image        `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	Title    string        `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Jtitle   string        `protobuf:"bytes,9,opt,name=jtitle,proto3" json:"jtitle,omitempty"`
	Format   common.Format `protobuf:"varint,10,opt,name=format,proto3,enum=cinewavehub.common.Format" json:"format,omitempty"`
	Duration string        `protobuf:"bytes,11,opt,name=duration,proto3" json:"duration,omitempty"`
	Released string        `protobuf:"bytes,12,opt,name=released,proto3" json:"released,omitempty"`
	Url      string        `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AnimeSearch) Reset() {
	*x = AnimeSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_anime_scraper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeSearch) ProtoMessage() {}

func (x *AnimeSearch) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_anime_scraper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeSearch.ProtoReflect.Descriptor instead.
func (*AnimeSearch) Descriptor() ([]byte, []int) {
	return file_scraper_anime_scraper_proto_rawDescGZIP(), []int{0}
}

func (x *AnimeSearch) GetAdult() bool {
	if x != nil {
		return x.Adult
	}
	return false
}

func (x *AnimeSearch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnimeSearch) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *AnimeSearch) GetSub() uint32 {
	if x != nil {
		return x.Sub
	}
	return 0
}

func (x *AnimeSearch) GetDub() uint32 {
	if x != nil {
		return x.Dub
	}
	return 0
}

func (x *AnimeSearch) GetEpisodes() uint32 {
	if x != nil {
		return x.Episodes
	}
	return 0
}

func (x *AnimeSearch) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AnimeSearch) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AnimeSearch) GetJtitle() string {
	if x != nil {
		return x.Jtitle
	}
	return ""
}

func (x *AnimeSearch) GetFormat() common.Format {
	if x != nil {
		return x.Format
	}
	return common.Format(0)
}

func (x *AnimeSearch) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AnimeSearch) GetReleased() string {
	if x != nil {
		return x.Released
	}
	return ""
}

func (x *AnimeSearch) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AnimeSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider   string         `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Pagination *Pagination    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Data       []*AnimeSearch `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AnimeSearchResponse) Reset() {
	*x = AnimeSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_anime_scraper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeSearchResponse) ProtoMessage() {}

func (x *AnimeSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_anime_scraper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeSearchResponse.ProtoReflect.Descriptor instead.
func (*AnimeSearchResponse) Descriptor() ([]byte, []int) {
	return file_scraper_anime_scraper_proto_rawDescGZIP(), []int{1}
}

func (x *AnimeSearchResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AnimeSearchResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AnimeSearchResponse) GetData() []*AnimeSearch {
	if x != nil {
		return x.Data
	}
	return nil
}

type AnimeEpisode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeId   string                 `protobuf:"bytes,1,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	Episode     float32                `protobuf:"fixed32,2,opt,name=episode,proto3" json:"episode,omitempty"`
	Titles      map[string]string      `protobuf:"bytes,3,rep,name=titles,proto3" json:"titles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Image       *Image                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Filler      bool                   `protobuf:"varint,6,opt,name=filler,proto3" json:"filler,omitempty"`
	Aired       bool                   `protobuf:"varint,7,opt,name=aired,proto3" json:"aired,omitempty"`
	Available   bool                   `protobuf:"varint,8,opt,name=available,proto3" json:"available,omitempty"`
	Duration    string                 `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Providers   []*Provider            `protobuf:"bytes,11,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (x *AnimeEpisode) Reset() {
	*x = AnimeEpisode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_anime_scraper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeEpisode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeEpisode) ProtoMessage() {}

func (x *AnimeEpisode) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_anime_scraper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeEpisode.ProtoReflect.Descriptor instead.
func (*AnimeEpisode) Descriptor() ([]byte, []int) {
	return file_scraper_anime_scraper_proto_rawDescGZIP(), []int{2}
}

func (x *AnimeEpisode) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *AnimeEpisode) GetEpisode() float32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *AnimeEpisode) GetTitles() map[string]string {
	if x != nil {
		return x.Titles
	}
	return nil
}

func (x *AnimeEpisode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnimeEpisode) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AnimeEpisode) GetFiller() bool {
	if x != nil {
		return x.Filler
	}
	return false
}

func (x *AnimeEpisode) GetAired() bool {
	if x != nil {
		return x.Aired
	}
	return false
}

func (x *AnimeEpisode) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *AnimeEpisode) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AnimeEpisode) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *AnimeEpisode) GetProviders() []*Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

type AnimeEpisodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Episodes []*AnimeEpisode `protobuf:"bytes,2,rep,name=episodes,proto3" json:"episodes,omitempty"`
}

func (x *AnimeEpisodes) Reset() {
	*x = AnimeEpisodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_anime_scraper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeEpisodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeEpisodes) ProtoMessage() {}

func (x *AnimeEpisodes) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_anime_scraper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeEpisodes.ProtoReflect.Descriptor instead.
func (*AnimeEpisodes) Descriptor() ([]byte, []int) {
	return file_scraper_anime_scraper_proto_rawDescGZIP(), []int{3}
}

func (x *AnimeEpisodes) GetEpisodes() []*AnimeEpisode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type AnimeEpisodesAndMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MalId            string            `protobuf:"bytes,1,opt,name=mal_id,json=malId,proto3" json:"mal_id,omitempty"`
	SimklId          string            `protobuf:"bytes,2,opt,name=simkl_id,json=simklId,proto3" json:"simkl_id,omitempty"`
	Titles           map[string]string `protobuf:"bytes,3,rep,name=titles,proto3" json:"titles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Format           common.Format     `protobuf:"varint,4,opt,name=format,proto3,enum=cinewavehub.common.Format" json:"format,omitempty"`
	ExternalMappings bool              `protobuf:"varint,5,opt,name=externalMappings,proto3" json:"externalMappings,omitempty"`
	Maps             *Mappings         `protobuf:"bytes,6,opt,name=maps,proto3" json:"maps,omitempty"`
}

func (x *AnimeEpisodesAndMappingsRequest) Reset() {
	*x = AnimeEpisodesAndMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_anime_scraper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeEpisodesAndMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeEpisodesAndMappingsRequest) ProtoMessage() {}

func (x *AnimeEpisodesAndMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_anime_scraper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeEpisodesAndMappingsRequest.ProtoReflect.Descriptor instead.
func (*AnimeEpisodesAndMappingsRequest) Descriptor() ([]byte, []int) {
	return file_scraper_anime_scraper_proto_rawDescGZIP(), []int{4}
}

func (x *AnimeEpisodesAndMappingsRequest) GetMalId() string {
	if x != nil {
		return x.MalId
	}
	return ""
}

func (x *AnimeEpisodesAndMappingsRequest) GetSimklId() string {
	if x != nil {
		return x.SimklId
	}
	return ""
}

func (x *AnimeEpisodesAndMappingsRequest) GetTitles() map[string]string {
	if x != nil {
		return x.Titles
	}
	return nil
}

func (x *AnimeEpisodesAndMappingsRequest) GetFormat() common.Format {
	if x != nil {
		return x.Format
	}
	return common.Format(0)
}

func (x *AnimeEpisodesAndMappingsRequest) GetExternalMappings() bool {
	if x != nil {
		return x.ExternalMappings
	}
	return false
}

func (x *AnimeEpisodesAndMappingsRequest) GetMaps() *Mappings {
	if x != nil {
		return x.Maps
	}
	return nil
}

type AnimeEpisodesAndMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mappings *Mappings       `protobuf:"bytes,1,opt,name=mappings,proto3" json:"mappings,omitempty"`
	Episodes []*AnimeEpisode `protobuf:"bytes,2,rep,name=episodes,proto3" json:"episodes,omitempty"`
}

func (x *AnimeEpisodesAndMappingsResponse) Reset() {
	*x = AnimeEpisodesAndMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_anime_scraper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeEpisodesAndMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeEpisodesAndMappingsResponse) ProtoMessage() {}

func (x *AnimeEpisodesAndMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_anime_scraper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeEpisodesAndMappingsResponse.ProtoReflect.Descriptor instead.
func (*AnimeEpisodesAndMappingsResponse) Descriptor() ([]byte, []int) {
	return file_scraper_anime_scraper_proto_rawDescGZIP(), []int{5}
}

func (x *AnimeEpisodesAndMappingsResponse) GetMappings() *Mappings {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *AnimeEpisodesAndMappingsResponse) GetEpisodes() []*AnimeEpisode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type AnimeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MalId string `protobuf:"bytes,1,opt,name=mal_id,json=malId,proto3" json:"mal_id,omitempty"`
}

func (x *AnimeInfoRequest) Reset() {
	*x = AnimeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_anime_scraper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeInfoRequest) ProtoMessage() {}

func (x *AnimeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_anime_scraper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeInfoRequest.ProtoReflect.Descriptor instead.
func (*AnimeInfoRequest) Descriptor() ([]byte, []int) {
	return file_scraper_anime_scraper_proto_rawDescGZIP(), []int{6}
}

func (x *AnimeInfoRequest) GetMalId() string {
	if x != nil {
		return x.MalId
	}
	return ""
}

type AnimeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                map[string]string      `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PostId            map[string]string      `protobuf:"bytes,2,rep,name=post_id,json=postId,proto3" json:"post_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Titles            map[string]string      `protobuf:"bytes,3,rep,name=titles,proto3" json:"titles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description       string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Image             *Image                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	BannerImage       *Image                 `protobuf:"bytes,6,opt,name=banner_image,json=bannerImage,proto3" json:"banner_image,omitempty"`
	Format            common.Format          `protobuf:"varint,7,opt,name=format,proto3,enum=cinewavehub.common.Format" json:"format,omitempty"`
	Status            common.Status          `protobuf:"varint,8,opt,name=status,proto3,enum=cinewavehub.common.Status" json:"status,omitempty"`
	Aired             *Aired                 `protobuf:"bytes,9,opt,name=aired,proto3" json:"aired,omitempty"`
	Season            common.Season          `protobuf:"varint,10,opt,name=season,proto3,enum=cinewavehub.common.Season" json:"season,omitempty"`
	SeasonYear        uint32                 `protobuf:"varint,11,opt,name=season_year,json=seasonYear,proto3" json:"season_year,omitempty"`
	SeasonInt         uint32                 `protobuf:"varint,12,opt,name=season_int,json=seasonInt,proto3" json:"season_int,omitempty"`
	Episodes          uint32                 `protobuf:"varint,13,opt,name=episodes,proto3" json:"episodes,omitempty"`
	Duration          string                 `protobuf:"bytes,14,opt,name=duration,proto3" json:"duration,omitempty"`
	CountryOfOrigin   string                 `protobuf:"bytes,15,opt,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
	Licensed          bool                   `protobuf:"varint,16,opt,name=licensed,proto3" json:"licensed,omitempty"`
	Source            string                 `protobuf:"bytes,17,opt,name=source,proto3" json:"source,omitempty"`
	Hashtag           string                 `protobuf:"bytes,18,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Trailer           *Video                 `protobuf:"bytes,19,opt,name=trailer,proto3" json:"trailer,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Synonyms          []string               `protobuf:"bytes,21,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Genres            []string               `protobuf:"bytes,22,rep,name=genres,proto3" json:"genres,omitempty"`
	Rating            common.Rating          `protobuf:"varint,23,opt,name=rating,proto3,enum=cinewavehub.common.Rating" json:"rating,omitempty"`
	Score             map[string]float32     `protobuf:"bytes,24,rep,name=score,proto3" json:"score,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MaxScore          map[string]float32     `protobuf:"bytes,25,rep,name=max_score,json=maxScore,proto3" json:"max_score,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Broadcast         string                 `protobuf:"bytes,26,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Producers         []*Company             `protobuf:"bytes,27,rep,name=producers,proto3" json:"producers,omitempty"`
	Themes            []string               `protobuf:"bytes,28,rep,name=themes,proto3" json:"themes,omitempty"`
	Studios           []*Company             `protobuf:"bytes,29,rep,name=studios,proto3" json:"studios,omitempty"`
	Demographic       []string               `protobuf:"bytes,30,rep,name=demographic,proto3" json:"demographic,omitempty"`
	Tags              []*Tag                 `protobuf:"bytes,31,rep,name=tags,proto3" json:"tags,omitempty"`
	Adult             bool                   `protobuf:"varint,32,opt,name=adult,proto3" json:"adult,omitempty"`
	NextAiringEpisode *NextAiringEpisode     `protobuf:"bytes,33,opt,name=next_airing_episode,json=nextAiringEpisode,proto3" json:"next_airing_episode,omitempty"`
	Rankings          []*Ranking             `protobuf:"bytes,34,rep,name=rankings,proto3" json:"rankings,omitempty"`
	OfficialSites     []*OfficialSite        `protobuf:"bytes,35,rep,name=official_sites,json=officialSites,proto3" json:"official_sites,omitempty"`
	OtherInfo         string                 `protobuf:"bytes,36,opt,name=other_info,json=otherInfo,proto3" json:"other_info,omitempty"`
}

func (x *AnimeInfoResponse) Reset() {
	*x = AnimeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scraper_anime_scraper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimeInfoResponse) ProtoMessage() {}

func (x *AnimeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scraper_anime_scraper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimeInfoResponse.ProtoReflect.Descriptor instead.
func (*AnimeInfoResponse) Descriptor() ([]byte, []int) {
	return file_scraper_anime_scraper_proto_rawDescGZIP(), []int{7}
}

func (x *AnimeInfoResponse) GetId() map[string]string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AnimeInfoResponse) GetPostId() map[string]string {
	if x != nil {
		return x.PostId
	}
	return nil
}

func (x *AnimeInfoResponse) GetTitles() map[string]string {
	if x != nil {
		return x.Titles
	}
	return nil
}

func (x *AnimeInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnimeInfoResponse) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AnimeInfoResponse) GetBannerImage() *Image {
	if x != nil {
		return x.BannerImage
	}
	return nil
}

func (x *AnimeInfoResponse) GetFormat() common.Format {
	if x != nil {
		return x.Format
	}
	return common.Format(0)
}

func (x *AnimeInfoResponse) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *AnimeInfoResponse) GetAired() *Aired {
	if x != nil {
		return x.Aired
	}
	return nil
}

func (x *AnimeInfoResponse) GetSeason() common.Season {
	if x != nil {
		return x.Season
	}
	return common.Season(0)
}

func (x *AnimeInfoResponse) GetSeasonYear() uint32 {
	if x != nil {
		return x.SeasonYear
	}
	return 0
}

func (x *AnimeInfoResponse) GetSeasonInt() uint32 {
	if x != nil {
		return x.SeasonInt
	}
	return 0
}

func (x *AnimeInfoResponse) GetEpisodes() uint32 {
	if x != nil {
		return x.Episodes
	}
	return 0
}

func (x *AnimeInfoResponse) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AnimeInfoResponse) GetCountryOfOrigin() string {
	if x != nil {
		return x.CountryOfOrigin
	}
	return ""
}

func (x *AnimeInfoResponse) GetLicensed() bool {
	if x != nil {
		return x.Licensed
	}
	return false
}

func (x *AnimeInfoResponse) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AnimeInfoResponse) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *AnimeInfoResponse) GetTrailer() *Video {
	if x != nil {
		return x.Trailer
	}
	return nil
}

func (x *AnimeInfoResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AnimeInfoResponse) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *AnimeInfoResponse) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *AnimeInfoResponse) GetRating() common.Rating {
	if x != nil {
		return x.Rating
	}
	return common.Rating(0)
}

func (x *AnimeInfoResponse) GetScore() map[string]float32 {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *AnimeInfoResponse) GetMaxScore() map[string]float32 {
	if x != nil {
		return x.MaxScore
	}
	return nil
}

func (x *AnimeInfoResponse) GetBroadcast() string {
	if x != nil {
		return x.Broadcast
	}
	return ""
}

func (x *AnimeInfoResponse) GetProducers() []*Company {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *AnimeInfoResponse) GetThemes() []string {
	if x != nil {
		return x.Themes
	}
	return nil
}

func (x *AnimeInfoResponse) GetStudios() []*Company {
	if x != nil {
		return x.Studios
	}
	return nil
}

func (x *AnimeInfoResponse) GetDemographic() []string {
	if x != nil {
		return x.Demographic
	}
	return nil
}

func (x *AnimeInfoResponse) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AnimeInfoResponse) GetAdult() bool {
	if x != nil {
		return x.Adult
	}
	return false
}

func (x *AnimeInfoResponse) GetNextAiringEpisode() *NextAiringEpisode {
	if x != nil {
		return x.NextAiringEpisode
	}
	return nil
}

func (x *AnimeInfoResponse) GetRankings() []*Ranking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *AnimeInfoResponse) GetOfficialSites() []*OfficialSite {
	if x != nil {
		return x.OfficialSites
	}
	return nil
}

func (x *AnimeInfoResponse) GetOtherInfo() string {
	if x != nil {
		return x.OtherInfo
	}
	return ""
}

var File_scraper_anime_scraper_proto protoreflect.FileDescriptor

var file_scraper_anime_scraper_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x02, 0x0a, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x75, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x69, 0x6e,
	0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x04,
	0x0a, 0x0c, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61,
	0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e,
	0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4e, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0xfb, 0x02, 0x0a, 0x1f, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x69, 0x6d, 0x6b, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x69, 0x6d, 0x6b, 0x6c, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61,
	0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e,
	0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04,
	0x6d, 0x61, 0x70, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9c, 0x01, 0x0a, 0x20, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x3d, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x29,
	0x0a, 0x10, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xe3, 0x0f, 0x0a, 0x11, 0x41, 0x6e,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x69,
	0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4b, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x06,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65,
	0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x69,
	0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x69, 0x72, 0x65, 0x64, 0x52, 0x05,
	0x61, 0x69, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x51, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x69, 0x6e,
	0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64,
	0x75, 0x6c, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x75, 0x6c, 0x74,
	0x12, 0x56, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x69, 0x6e,
	0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x69, 0x6e,
	0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0d, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x35, 0x0a, 0x07, 0x49,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xb8, 0x03, 0x0a, 0x0c, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77,
	0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x34, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x18,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x34, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77,
	0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x23, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x75, 0x62, 0x68, 0x61, 0x6d,
	0x37, 0x31, 0x30, 0x31, 0x2f, 0x63, 0x69, 0x6e, 0x65, 0x77, 0x61, 0x76, 0x65, 0x68, 0x75, 0x62,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scraper_anime_scraper_proto_rawDescOnce sync.Once
	file_scraper_anime_scraper_proto_rawDescData = file_scraper_anime_scraper_proto_rawDesc
)

func file_scraper_anime_scraper_proto_rawDescGZIP() []byte {
	file_scraper_anime_scraper_proto_rawDescOnce.Do(func() {
		file_scraper_anime_scraper_proto_rawDescData = protoimpl.X.CompressGZIP(file_scraper_anime_scraper_proto_rawDescData)
	})
	return file_scraper_anime_scraper_proto_rawDescData
}

var file_scraper_anime_scraper_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_scraper_anime_scraper_proto_goTypes = []any{
	(*AnimeSearch)(nil),                      // 0: cinewavehub.scraper.AnimeSearch
	(*AnimeSearchResponse)(nil),              // 1: cinewavehub.scraper.AnimeSearchResponse
	(*AnimeEpisode)(nil),                     // 2: cinewavehub.scraper.AnimeEpisode
	(*AnimeEpisodes)(nil),                    // 3: cinewavehub.scraper.AnimeEpisodes
	(*AnimeEpisodesAndMappingsRequest)(nil),  // 4: cinewavehub.scraper.AnimeEpisodesAndMappingsRequest
	(*AnimeEpisodesAndMappingsResponse)(nil), // 5: cinewavehub.scraper.AnimeEpisodesAndMappingsResponse
	(*AnimeInfoRequest)(nil),                 // 6: cinewavehub.scraper.AnimeInfoRequest
	(*AnimeInfoResponse)(nil),                // 7: cinewavehub.scraper.AnimeInfoResponse
	nil,                                      // 8: cinewavehub.scraper.AnimeEpisode.TitlesEntry
	nil,                                      // 9: cinewavehub.scraper.AnimeEpisodesAndMappingsRequest.TitlesEntry
	nil,                                      // 10: cinewavehub.scraper.AnimeInfoResponse.IdEntry
	nil,                                      // 11: cinewavehub.scraper.AnimeInfoResponse.PostIdEntry
	nil,                                      // 12: cinewavehub.scraper.AnimeInfoResponse.TitlesEntry
	nil,                                      // 13: cinewavehub.scraper.AnimeInfoResponse.ScoreEntry
	nil,                                      // 14: cinewavehub.scraper.AnimeInfoResponse.MaxScoreEntry
	(*Image)(nil),                            // 15: cinewavehub.scraper.Image
	(common.Format)(0),                       // 16: cinewavehub.common.Format
	(*Pagination)(nil),                       // 17: cinewavehub.scraper.Pagination
	(*timestamppb.Timestamp)(nil),            // 18: google.protobuf.Timestamp
	(*Provider)(nil),                         // 19: cinewavehub.scraper.Provider
	(*Mappings)(nil),                         // 20: cinewavehub.scraper.Mappings
	(common.Status)(0),                       // 21: cinewavehub.common.Status
	(*Aired)(nil),                            // 22: cinewavehub.scraper.Aired
	(common.Season)(0),                       // 23: cinewavehub.common.Season
	(*Video)(nil),                            // 24: cinewavehub.scraper.Video
	(common.Rating)(0),                       // 25: cinewavehub.common.Rating
	(*Company)(nil),                          // 26: cinewavehub.scraper.Company
	(*Tag)(nil),                              // 27: cinewavehub.scraper.Tag
	(*NextAiringEpisode)(nil),                // 28: cinewavehub.scraper.NextAiringEpisode
	(*Ranking)(nil),                          // 29: cinewavehub.scraper.Ranking
	(*OfficialSite)(nil),                     // 30: cinewavehub.scraper.OfficialSite
	(*SourcesRequest)(nil),                   // 31: cinewavehub.scraper.SourcesRequest
	(*ScraperResponse)(nil),                  // 32: cinewavehub.scraper.ScraperResponse
	(*SourcesResponse)(nil),                  // 33: cinewavehub.scraper.SourcesResponse
}
var file_scraper_anime_scraper_proto_depIdxs = []int32{
	15, // 0: cinewavehub.scraper.AnimeSearch.image:type_name -> cinewavehub.scraper.Image
	16, // 1: cinewavehub.scraper.AnimeSearch.format:type_name -> cinewavehub.common.Format
	17, // 2: cinewavehub.scraper.AnimeSearchResponse.pagination:type_name -> cinewavehub.scraper.Pagination
	0,  // 3: cinewavehub.scraper.AnimeSearchResponse.data:type_name -> cinewavehub.scraper.AnimeSearch
	8,  // 4: cinewavehub.scraper.AnimeEpisode.titles:type_name -> cinewavehub.scraper.AnimeEpisode.TitlesEntry
	15, // 5: cinewavehub.scraper.AnimeEpisode.image:type_name -> cinewavehub.scraper.Image
	18, // 6: cinewavehub.scraper.AnimeEpisode.release_date:type_name -> google.protobuf.Timestamp
	19, // 7: cinewavehub.scraper.AnimeEpisode.providers:type_name -> cinewavehub.scraper.Provider
	2,  // 8: cinewavehub.scraper.AnimeEpisodes.episodes:type_name -> cinewavehub.scraper.AnimeEpisode
	9,  // 9: cinewavehub.scraper.AnimeEpisodesAndMappingsRequest.titles:type_name -> cinewavehub.scraper.AnimeEpisodesAndMappingsRequest.TitlesEntry
	16, // 10: cinewavehub.scraper.AnimeEpisodesAndMappingsRequest.format:type_name -> cinewavehub.common.Format
	20, // 11: cinewavehub.scraper.AnimeEpisodesAndMappingsRequest.maps:type_name -> cinewavehub.scraper.Mappings
	20, // 12: cinewavehub.scraper.AnimeEpisodesAndMappingsResponse.mappings:type_name -> cinewavehub.scraper.Mappings
	2,  // 13: cinewavehub.scraper.AnimeEpisodesAndMappingsResponse.episodes:type_name -> cinewavehub.scraper.AnimeEpisode
	10, // 14: cinewavehub.scraper.AnimeInfoResponse.id:type_name -> cinewavehub.scraper.AnimeInfoResponse.IdEntry
	11, // 15: cinewavehub.scraper.AnimeInfoResponse.post_id:type_name -> cinewavehub.scraper.AnimeInfoResponse.PostIdEntry
	12, // 16: cinewavehub.scraper.AnimeInfoResponse.titles:type_name -> cinewavehub.scraper.AnimeInfoResponse.TitlesEntry
	15, // 17: cinewavehub.scraper.AnimeInfoResponse.image:type_name -> cinewavehub.scraper.Image
	15, // 18: cinewavehub.scraper.AnimeInfoResponse.banner_image:type_name -> cinewavehub.scraper.Image
	16, // 19: cinewavehub.scraper.AnimeInfoResponse.format:type_name -> cinewavehub.common.Format
	21, // 20: cinewavehub.scraper.AnimeInfoResponse.status:type_name -> cinewavehub.common.Status
	22, // 21: cinewavehub.scraper.AnimeInfoResponse.aired:type_name -> cinewavehub.scraper.Aired
	23, // 22: cinewavehub.scraper.AnimeInfoResponse.season:type_name -> cinewavehub.common.Season
	24, // 23: cinewavehub.scraper.AnimeInfoResponse.trailer:type_name -> cinewavehub.scraper.Video
	18, // 24: cinewavehub.scraper.AnimeInfoResponse.updated_at:type_name -> google.protobuf.Timestamp
	25, // 25: cinewavehub.scraper.AnimeInfoResponse.rating:type_name -> cinewavehub.common.Rating
	13, // 26: cinewavehub.scraper.AnimeInfoResponse.score:type_name -> cinewavehub.scraper.AnimeInfoResponse.ScoreEntry
	14, // 27: cinewavehub.scraper.AnimeInfoResponse.max_score:type_name -> cinewavehub.scraper.AnimeInfoResponse.MaxScoreEntry
	26, // 28: cinewavehub.scraper.AnimeInfoResponse.producers:type_name -> cinewavehub.scraper.Company
	26, // 29: cinewavehub.scraper.AnimeInfoResponse.studios:type_name -> cinewavehub.scraper.Company
	27, // 30: cinewavehub.scraper.AnimeInfoResponse.tags:type_name -> cinewavehub.scraper.Tag
	28, // 31: cinewavehub.scraper.AnimeInfoResponse.next_airing_episode:type_name -> cinewavehub.scraper.NextAiringEpisode
	29, // 32: cinewavehub.scraper.AnimeInfoResponse.rankings:type_name -> cinewavehub.scraper.Ranking
	30, // 33: cinewavehub.scraper.AnimeInfoResponse.official_sites:type_name -> cinewavehub.scraper.OfficialSite
	6,  // 34: cinewavehub.scraper.AnimeScraper.Info:input_type -> cinewavehub.scraper.AnimeInfoRequest
	4,  // 35: cinewavehub.scraper.AnimeScraper.EpisodesAndMappings:input_type -> cinewavehub.scraper.AnimeEpisodesAndMappingsRequest
	4,  // 36: cinewavehub.scraper.AnimeScraper.EpisodesAndMappingsAsync:input_type -> cinewavehub.scraper.AnimeEpisodesAndMappingsRequest
	31, // 37: cinewavehub.scraper.AnimeScraper.Sources:input_type -> cinewavehub.scraper.SourcesRequest
	7,  // 38: cinewavehub.scraper.AnimeScraper.Info:output_type -> cinewavehub.scraper.AnimeInfoResponse
	5,  // 39: cinewavehub.scraper.AnimeScraper.EpisodesAndMappings:output_type -> cinewavehub.scraper.AnimeEpisodesAndMappingsResponse
	32, // 40: cinewavehub.scraper.AnimeScraper.EpisodesAndMappingsAsync:output_type -> cinewavehub.scraper.ScraperResponse
	33, // 41: cinewavehub.scraper.AnimeScraper.Sources:output_type -> cinewavehub.scraper.SourcesResponse
	38, // [38:42] is the sub-list for method output_type
	34, // [34:38] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_scraper_anime_scraper_proto_init() }
func file_scraper_anime_scraper_proto_init() {
	if File_scraper_anime_scraper_proto != nil {
		return
	}
	file_scraper_scraper_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scraper_anime_scraper_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_anime_scraper_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_anime_scraper_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeEpisode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_anime_scraper_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeEpisodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_anime_scraper_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeEpisodesAndMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_anime_scraper_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeEpisodesAndMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_anime_scraper_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scraper_anime_scraper_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AnimeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scraper_anime_scraper_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scraper_anime_scraper_proto_goTypes,
		DependencyIndexes: file_scraper_anime_scraper_proto_depIdxs,
		MessageInfos:      file_scraper_anime_scraper_proto_msgTypes,
	}.Build()
	File_scraper_anime_scraper_proto = out.File
	file_scraper_anime_scraper_proto_rawDesc = nil
	file_scraper_anime_scraper_proto_goTypes = nil
	file_scraper_anime_scraper_proto_depIdxs = nil
}
